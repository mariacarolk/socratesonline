"""
Script para fazer deploy seguro das migra√ß√µes para o Railway
"""
import os
import sys
import subprocess
import json
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def create_deployment_package():
    """Criar pacote de deployment com todas as migra√ß√µes"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    print("\nüöÄ PREPARANDO DEPLOY PARA O RAILWAY\n")
    
    # 1. Verificar se existem migra√ß√µes n√£o commitadas
    result = subprocess.run(['git', 'status', '--porcelain', 'migrations/'], 
                          capture_output=True, text=True)
    
    if result.stdout:
        print("‚ö†Ô∏è Existem migra√ß√µes n√£o commitadas:")
        print(result.stdout)
        response = input("\n Deseja adicionar ao git? (s/n): ")
        if response.lower() == 's':
            subprocess.run(['git', 'add', 'migrations/'])
            commit_msg = f"feat: migrations update - {timestamp}"
            subprocess.run(['git', 'commit', '-m', commit_msg])
            print(f"‚úÖ Migra√ß√µes commitadas: {commit_msg}")
    
    # 2. Criar arquivo de instru√ß√µes para o Railway
    instructions = {
        "timestamp": timestamp,
        "instructions": [
            "1. Fazer backup do banco de produ√ß√£o",
            "2. Executar: flask db upgrade",
            "3. Verificar se todas as tabelas foram criadas/atualizadas",
            "4. Testar funcionalidades principais"
        ],
        "commands": {
            "backup": "pg_dump $DATABASE_URL > backup_before_migration.sql",
            "migrate": "flask db upgrade",
            "verify": "flask db current"
        }
    }
    
    with open('DEPLOY_INSTRUCTIONS.json', 'w') as f:
        json.dump(instructions, f, indent=2)
    
    print("\n‚úÖ Instru√ß√µes de deploy criadas em DEPLOY_INSTRUCTIONS.json")
    
    # 3. Criar script de migra√ß√£o autom√°tica para Railway
    railway_script = """#!/bin/bash
# Script de migra√ß√£o autom√°tica para Railway

echo "üöÄ Iniciando migra√ß√£o no Railway..."

# Exportar vari√°veis
export FLASK_APP=app.py

# Verificar migra√ß√£o atual
echo "üìù Migra√ß√£o atual:"
flask db current

# Aplicar novas migra√ß√µes
echo "‚¨ÜÔ∏è Aplicando migra√ß√µes..."
flask db upgrade

# Verificar nova vers√£o
echo "‚úÖ Nova vers√£o:"
flask db current

echo "‚ú® Migra√ß√£o conclu√≠da!"
"""
    
    with open('railway_migrate.sh', 'w') as f:
        f.write(railway_script)
    
    print("‚úÖ Script railway_migrate.sh criado")
    
    # 4. Atualizar railway.json se necess√°rio
    if os.path.exists('railway.json'):
        with open('railway.json', 'r') as f:
            railway_config = json.load(f)
        
        # Adicionar comando de migra√ß√£o ao deploy
        if 'deploy' not in railway_config:
            railway_config['deploy'] = {}
        
        railway_config['deploy']['startCommand'] = "flask db upgrade && python app.py"
        
        with open('railway.json', 'w') as f:
            json.dump(railway_config, f, indent=2)
        
        print("‚úÖ railway.json atualizado com comando de migra√ß√£o")
    
    print("\nüìã CHECKLIST PARA DEPLOY:")
    print("1. ‚úÖ Migra√ß√µes preparadas")
    print("2. ‚è≥ Fazer push para o GitHub: git push origin main")
    print("3. ‚è≥ Railway vai executar automaticamente as migra√ß√µes")
    print("4. ‚è≥ Verificar logs no Railway Dashboard")
    
    return True

def check_production_compatibility():
    """Verificar compatibilidade com produ√ß√£o"""
    print("\nüîç Verificando compatibilidade com produ√ß√£o...")
    
    # Verificar se todas as migra√ß√µes s√£o revers√≠veis
    migrations_dir = "migrations/versions"
    if os.path.exists(migrations_dir):
        migration_files = [f for f in os.listdir(migrations_dir) if f.endswith('.py') and f != '__init__.py']
        
        for migration_file in migration_files:
            file_path = os.path.join(migrations_dir, migration_file)
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                if 'def downgrade():' not in content:
                    print(f"‚ö†Ô∏è Migra√ß√£o {migration_file} n√£o tem fun√ß√£o downgrade")
                elif 'pass' in content.split('def downgrade():')[1].split('def')[0]:
                    print(f"‚ö†Ô∏è Migra√ß√£o {migration_file} tem downgrade vazio")
    
    print("‚úÖ Verifica√ß√£o conclu√≠da")

if __name__ == "__main__":
    print("=" * 50)
    print("DEPLOY DE MIGRA√á√ïES PARA O RAILWAY")
    print("=" * 50)
    
    check_production_compatibility()
    
    response = input("\n Preparar deploy? (s/n): ")
    if response.lower() == 's':
        create_deployment_package()
        
        print("\nüéâ DEPLOY PREPARADO!")
        print("\n Comandos para executar:")
        print("   1. git push origin main")
        print("   2. Acompanhar logs no Railway Dashboard")
    else:
        print("‚ùå Deploy cancelado")
