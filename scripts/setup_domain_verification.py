#!/usr/bin/env python3
"""
Script para auxiliar na configura√ß√£o de verifica√ß√£o de dom√≠nio no AWS SES
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv
load_dotenv()

from services.aws_email_service import aws_email_service

def setup_domain_verification():
    """Guia para configurar verifica√ß√£o de dom√≠nio"""
    print("üåê CONFIGURA√á√ÉO DE VERIFICA√á√ÉO DE DOM√çNIO")
    print("=" * 60)
    
    domain = input("Digite seu dom√≠nio (ex: socratesonline.com): ").strip()
    
    if not domain:
        print("‚ùå Dom√≠nio obrigat√≥rio!")
        return
    
    print(f"\nüîç Iniciando verifica√ß√£o para: {domain}")
    
    # Verificar dom√≠nio no AWS SES
    result = aws_email_service.verify_domain_identity(domain)
    
    if not result['success']:
        print(f"‚ùå Erro ao iniciar verifica√ß√£o: {result['error']}")
        return
    
    token = result['verification_token']
    
    print(f"\n‚úÖ Verifica√ß√£o iniciada!")
    print(f"üîë Token de verifica√ß√£o: {token}")
    
    print(f"\nüìã CONFIGURA√á√ïES DNS NECESS√ÅRIAS:")
    print("=" * 40)
    
    # 1. Verifica√ß√£o SES
    print("1Ô∏è‚É£ VERIFICA√á√ÉO AWS SES:")
    print(f"   Tipo: TXT")
    print(f"   Nome: _amazonses.{domain}")
    print(f"   Valor: {token}")
    print(f"   TTL: 300")
    
    # 2. SPF
    print(f"\n2Ô∏è‚É£ REGISTRO SPF:")
    print(f"   Tipo: TXT")
    print(f"   Nome: {domain}")
    print(f"   Valor: \"v=spf1 include:amazonses.com ~all\"")
    print(f"   TTL: 300")
    
    # 3. DMARC
    print(f"\n3Ô∏è‚É£ REGISTRO DMARC:")
    print(f"   Tipo: TXT")
    print(f"   Nome: _dmarc.{domain}")
    print(f"   Valor: \"v=DMARC1; p=quarantine; rua=mailto:dmarc@{domain}\"")
    print(f"   TTL: 300")
    
    print(f"\n4Ô∏è‚É£ REGISTROS DKIM:")
    print("   ‚ö†Ô∏è Ap√≥s a verifica√ß√£o do dom√≠nio ser aprovada:")
    print("   1. Acesse AWS SES Console")
    print(f"   2. Clique no dom√≠nio {domain}")
    print("   3. DKIM ‚Üí Edit ‚Üí Enable DKIM signing")
    print("   4. Copie os 3 registros CNAME gerados")
    print("   5. Adicione-os ao seu DNS")
    
    print(f"\nüîß INSTRU√á√ïES REGISTRO.BR:")
    print("=" * 35)
    print("1. Acesse: https://registro.br/")
    print("2. Login ‚Üí Meus dom√≠nios")
    print(f"3. Clique em '{domain}'")
    print("4. DNS ‚Üí Editar zona DNS")
    print("5. Adicione os registros acima")
    print("6. Salve as altera√ß√µes")
    
    print(f"\n‚è±Ô∏è TEMPO DE PROPAGA√á√ÉO:")
    print("‚Ä¢ DNS: 5 minutos a 24 horas")
    print("‚Ä¢ Verifica√ß√£o AWS: at√© 72 horas")
    
    print(f"\nüß™ VERIFICAR PROPAGA√á√ÉO:")
    print(f"nslookup -type=TXT _amazonses.{domain}")
    print(f"nslookup -type=TXT {domain}")
    
    print(f"\nüìû PR√ìXIMOS PASSOS:")
    print("1. Configure os registros DNS")
    print("2. Aguarde a propaga√ß√£o")
    print("3. Execute: python scripts/test_aws_email.py")
    print("4. Configure DKIM ap√≥s verifica√ß√£o aprovada")

def check_dns_propagation():
    """Verifica se os registros DNS propagaram"""
    domain = input("\nDigite o dom√≠nio para verificar: ").strip()
    
    if not domain:
        return
        
    print(f"\nüîç Verificando propaga√ß√£o DNS para: {domain}")
    
    try:
        import subprocess
        
        # Verificar registro SES
        print("\n1Ô∏è‚É£ Verificando registro _amazonses...")
        try:
            result = subprocess.run(['nslookup', '-type=TXT', f'_amazonses.{domain}'], 
                                 capture_output=True, text=True, timeout=10)
            if 'text =' in result.stdout.lower():
                print("   ‚úÖ Registro _amazonses encontrado")
            else:
                print("   ‚ùå Registro _amazonses n√£o encontrado ainda")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao verificar: {str(e)}")
        
        # Verificar SPF
        print("\n2Ô∏è‚É£ Verificando registro SPF...")
        try:
            result = subprocess.run(['nslookup', '-type=TXT', domain], 
                                 capture_output=True, text=True, timeout=10)
            if 'v=spf1' in result.stdout.lower():
                print("   ‚úÖ Registro SPF encontrado")
            else:
                print("   ‚ùå Registro SPF n√£o encontrado ainda")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao verificar: {str(e)}")
            
        # Verificar DMARC
        print("\n3Ô∏è‚É£ Verificando registro DMARC...")
        try:
            result = subprocess.run(['nslookup', '-type=TXT', f'_dmarc.{domain}'], 
                                 capture_output=True, text=True, timeout=10)
            if 'v=dmarc1' in result.stdout.lower():
                print("   ‚úÖ Registro DMARC encontrado")
            else:
                print("   ‚ùå Registro DMARC n√£o encontrado ainda")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao verificar: {str(e)}")
            
    except ImportError:
        print("‚ö†Ô∏è nslookup n√£o dispon√≠vel. Verifique manualmente:")
        print(f"nslookup -type=TXT _amazonses.{domain}")
        print(f"nslookup -type=TXT {domain}")
        print(f"nslookup -type=TXT _dmarc.{domain}")

def main():
    """Menu principal"""
    print("üõ†Ô∏è ASSISTENTE DE CONFIGURA√á√ÉO DNS")
    print("=" * 50)
    
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1. Configurar verifica√ß√£o de dom√≠nio")
        print("2. Verificar propaga√ß√£o DNS")
        print("3. Sair")
        
        choice = input("\nOp√ß√£o (1-3): ").strip()
        
        if choice == '1':
            setup_domain_verification()
        elif choice == '2':
            check_dns_propagation()
        elif choice == '3':
            print("\nüëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()














