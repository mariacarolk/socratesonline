#!/usr/bin/env python3
"""
Script de migra√ß√£o manual do banco de dados
"""

import sqlite3
import os

def migrar_banco():
    db_path = 'instance/database.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Banco de dados n√£o encontrado!")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üîÑ Iniciando migra√ß√£o manual do banco...")
        
        # 1. Adicionar coluna id_colaborador na tabela usuario (se n√£o existir)
        try:
            cursor.execute("ALTER TABLE usuario ADD COLUMN id_colaborador INTEGER")
            print("‚úÖ Coluna id_colaborador adicionada √† tabela usuario")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ö†Ô∏è  Coluna id_colaborador j√° existe")
            else:
                raise
        
        # 2. Verificar se existem usu√°rios para migrar
        cursor.execute("SELECT id, nome FROM usuario WHERE id_colaborador IS NULL")
        usuarios = cursor.fetchall()
        
        if not usuarios:
            print("‚úÖ Nenhum usu√°rio precisa ser migrado")
            return
        
        print(f"üìä Encontrados {len(usuarios)} usu√°rios para migrar")
        
        # 3. Para cada usu√°rio, encontrar ou criar colaborador correspondente
        for usuario_id, usuario_nome in usuarios:
            # Verificar se j√° existe colaborador com esse nome
            cursor.execute("SELECT id_colaborador FROM colaborador WHERE nome = ?", (usuario_nome,))
            colaborador = cursor.fetchone()
            
            if colaborador:
                colaborador_id = colaborador[0]
                print(f"üîÑ Usando colaborador existente: {usuario_nome}")
            else:
                # Criar novo colaborador
                cursor.execute("INSERT INTO colaborador (nome) VALUES (?)", (usuario_nome,))
                colaborador_id = cursor.lastrowid
                print(f"‚úÖ Colaborador criado: {usuario_nome}")
                
                # Associar categoria administrativa por padr√£o
                cursor.execute("SELECT id_categoria_colaborador FROM categoria_colaborador WHERE nome = 'Administrativo'")
                categoria_admin = cursor.fetchone()
                
                if categoria_admin:
                    cursor.execute(
                        "INSERT INTO colaborador_categoria (id_colaborador, id_categoria_colaborador) VALUES (?, ?)",
                        (colaborador_id, categoria_admin[0])
                    )
                    print(f"‚úÖ Categoria Administrativo associada ao colaborador {usuario_nome}")
            
            # Atualizar usu√°rio com refer√™ncia ao colaborador
            cursor.execute("UPDATE usuario SET id_colaborador = ? WHERE id = ?", (colaborador_id, usuario_id))
            print(f"‚úÖ Usu√°rio {usuario_nome} vinculado ao colaborador")
        
        # 4. Remover coluna categoria_id (se existir)
        try:
            # SQLite n√£o suporta DROP COLUMN diretamente, ent√£o vamos ignorar por enquanto
            print("‚ö†Ô∏è  Coluna categoria_id mantida (SQLite n√£o suporta DROP COLUMN)")
        except:
            pass
        
        conn.commit()
        print(f"\n‚úÖ Migra√ß√£o conclu√≠da! {len(usuarios)} usu√°rios migrados")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erro na migra√ß√£o: {e}")
        raise
    finally:
        conn.close()

if __name__ == "__main__":
    migrar_banco() 